local header_idx = 4
local headers = {
    {
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠛⠛⠛⠋⠉⠈⠉⠉⠉⠉⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⢿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⣀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢏⣴⣿⣷⠀⠀⠀⠀⠀⢾⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣾⣿⡟⠁⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣷⢢⠀⠀⠀⠀⠀⠀⠀⢸⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⠀⡴⠄⠀⠀⠀⠀⠀⠀⠙⠻⣿⣿⣿⣿⣷⣄⠀⠀⠀⠀⠀⠀⠀⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠶⢴⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣁⡀⠀⠀⢰⢠⣦⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⡄⠀⣴⣶⣿⡄⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡋⠀⠀⠀⠎⢸⣿⡆⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⠗⢘⣿⣟⠛⠿⣼",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⡌⢰⣿⡿⢿⡀⠀⠀⠀⠀⠀⠙⠿⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣧⢀⣼",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢻⠄⠘⠛⠋⠛⠃⠀⠀⠀⠀⠀⢿⣧⠈⠉⠙⠛⠋⠀⠀⠀⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠈⢸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠟⠀⠀⠀⠀⢀⢃⠀⠀⢸⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠴⢗⣠⣤⣴⡶⠶⠖⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡸⠀⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⢠⣾⣿⠏⠀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠉⠀⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠈⢹⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠈⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣴⣾⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⣀⣀⣀⣀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠙⣿⣿⡟⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠁⠀⠀⠹⣿⠃⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⢐⣿⣿⣿⣿⣿⣿⣿⣿⣿",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠛⠉⠉⠁⠀⢻⣿⡇⠀⠀⠀⠀⠀⠀⢀⠈⣿⣿⡿⠉⠛⠛⠛⠉⠉",
        "⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠋⠁⠀⠀⢀⣀⣠⡴⣸⣿⣇⡄⠀⠀⠀⠀⢀⡿⠄⠙⠛⠀⣀⣠⣤⣤⠄⠀",
    },

    {
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⠀⠀⠀⢀⣴⠟⠉⠀⠀⠀⠈⠻⣦⡀⠀⠀⠀⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣷⣀⢀⣾⠿⠻⢶⣄⠀⠀⣠⣶⡿⠶⣄⣠⣾⣿⠗⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⢻⣿⣿⡿⣿⠿⣿⡿⢼⣿⣿⡿⣿⣎⡟⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟⠉⠛⢛⣛⡉⠀⠀⠙⠛⠻⠛⠑⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣧⣤⣴⠿⠿⣷⣤⡤⠴⠖⠳⣄⣀⣹⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣀⣟⠻⢦⣀⡀⠀⠀⠀⠀⣀⡈⠻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡿⠉⡇⠀⠀⠛⠛⠛⠋⠉⠉⠀⠀⠀⠹⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⡟⠀⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠈⠑⠪⠷⠤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣦⣼⠛⢦⣤⣄⡀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠑⠢⡀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⢀⣠⠴⠲⠖⠛⠻⣿⡿⠛⠉⠉⠻⠷⣦⣽⠿⠿⠒⠚⠋⠉⠁⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢦⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⢀⣾⠛⠁⠀⠀⠀⠀⠀⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠤⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢣⠀⠀⠀",
        "⠀⠀⠀⠀⣰⡿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣑⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⡇⠀⠀",
        "⠀⠀⠀⣰⣿⣁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣧⣄⠀⠀⠀⠀⠀⠀⢳⡀⠀",
        "⠀⠀⠀⣿⡾⢿⣀⢀⣀⣦⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡰⣫⣿⡿⠟⠻⠶⠀⠀⠀⠀⠀⢳⠀",
        "⠀⠀⢀⣿⣧⡾⣿⣿⣿⣿⣿⡷⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⢀⡴⢿⣿⣧⠀⡀⠀⢀⣀⣀⢒⣤⣶⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇",
        "⠀⠀⡾⠁⠙⣿⡈⠉⠙⣿⣿⣷⣬⡛⢿⣶⣶⣴⣶⣶⣶⣤⣤⠤⠾⣿⣿⣿⡿⠿⣿⠿⢿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇",
        "⠀⣸⠃⠀⠀⢸⠃⠀⠀⢸⣿⣿⣿⣿⣿⣿⣷⣾⣿⣿⠟⡉⠀⠀⠀⠈⠙⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇",
        "⠀⣿⠀⠀⢀⡏⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⠿⠿⠛⠛⠉⠁⠀⠀⠀⠀⠀⠉⠠⠿⠟⠻⠟⠋⠉⢿⣿⣦⡀⢰⡀⠀⠀⠀⠀⠀⠀⠁",
        "⢀⣿⡆⢀⡾⠀⠀⠀⠀⣾⠏⢿⣿⣿⣿⣯⣙⢷⡄⠀⠀⠀⠀⠀⢸⡄⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣿⣻⢿⣷⣀⣷⣄⠀⠀⠀⠀⢸⠀",
        "⢸⠃⠠⣼⠃⠀⠀⣠⣾⡟⠀⠈⢿⣿⡿⠿⣿⣿⡿⠿⠿⠿⠷⣄⠈⠿⠛⠻⠶⢶⣄⣀⣀⡠⠈⢛⡿⠃⠈⢿⣿⣿⡿⠀⠀⠀⠀⠀⡀",
        "⠟⠀⠀⢻⣶⣶⣾⣿⡟⠁⠀⠀⢸⣿⢅⠀⠈⣿⡇⠀⠀⠀⠀⠀⣷⠂⠀⠀⠀⠀⠐⠋⠉⠉⠀⢸⠁⠀⠀⠀⢻⣿⠛⠀⠀⠀⠀⢀⠇",
        "⠀⠀⠀⠀⠹⣿⣿⠋⠀⠀⠀⠀⢸⣧⠀⠰⡀⢸⣷⣤⣤⡄⠀⠀⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡆⠀⠀⠀⠀⡾⠀⠀⠀⠀⠀⠀⢼⡇",
        "⠀⠀⠀⠀⠀⠙⢻⠄⠀⠀⠀⠀⣿⠉⠀⠀⠈⠓⢯⡉⠉⠉⢱⣶⠏⠙⠛⠚⠁⠀⠀⠀⠀⠀⣼⠇⠀⠀⠀⢀⡇⠀⠀⠀⠀⠀⠀⠀⡇",
        "⠀⠀⠀⠀⠀⠀⠻⠄⠀⠀⠀⢀⣿⠀⢠⡄⠀⠀⠀⣁⠁⡀⠀⢠⠀⠀⠀⠀⠀⠀⠀⠀⢀⣐⡟⠀⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⢠⡇",
    },

    {
        "⡿⣽⣻⣽⢯⡿⣽⣟⣿⣻⣟⣿⣻⡽⣏⡿⣹⢯⡽⢭⡻⣝⡯⣟⡻⣟⣻⡟⣿⢯⡿⣟⠻⡏⢽⡑⢯⡹⢯⡝⣏⠿⣙⢯⡙⢮⡙⢆⢣⠒⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠄⡄",
        "⣟⣳⢧⣟⡯⣟⣳⣟⣾⣳⣟⣾⣳⢿⣹⠾⣝⣮⢳⣏⡷⣭⢻⡼⣽⣣⢿⡾⣽⢺⡽⣋⠆⡉⠦⡘⢣⡜⣥⢛⣬⡏⣽⢒⡝⣢⣙⡌⢢⣑⣀⡠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠄⢂⢔⡣⣘",
        "⣿⣹⢾⣭⢿⣹⡗⣯⣞⣷⢻⣞⡽⣯⢯⣟⣳⣞⣳⢮⢷⡭⣷⡹⣧⢋⠶⡱⢏⡟⠻⢁⠊⢤⣑⡈⠆⡜⢈⠻⣭⠛⠤⣡⣾⡴⠞⠛⠛⠉⠉⠙⠛⠲⢦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⡐⢪⡕⢬",
        "⣷⣯⣟⣮⢯⣗⡿⣧⣟⣾⣻⡼⣯⣟⡿⣞⣧⣯⢷⣯⢯⢷⣳⡝⣦⠋⡔⢡⠈⢠⠁⠆⣸⣿⡝⣿⣦⠀⣠⠟⣸⣿⡷⠟⠁⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠳⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠢⢌⡳⡜⢦",
        "⣿⢾⡽⣞⣻⢮⢿⡽⣞⣷⣳⢯⣳⢯⣻⣝⡾⣭⣟⢮⣟⡞⣧⣛⠦⡩⢔⠡⡈⠔⠠⣶⣿⣿⣷⡌⠻⣶⡁⢀⣵⠟⢀⣤⣤⣄⣀⣀⢀⣀⣀⣀⣀⣀⣠⣀⣀⡈⢳⣄⠀⠀⠀⠀⠀⢀⣠⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠂⡜⢢⢽⡙⢮",
        "⣯⢯⣟⣭⢷⣯⣻⣽⣛⡾⣽⣏⣯⠷⣏⡾⣽⡳⣞⢯⡞⣽⠲⣍⠲⡁⢋⠆⡡⠌⡁⠙⡻⢿⣿⣿⣶⣌⣻⡿⢷⣴⣿⣿⣿⡟⣿⡿⣿⣯⠉⠿⡿⣟⣯⣝⣯⣻⣶⢿⣧⡀⢀⣠⠾⣋⣷⣬⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢠⠘⡄⢣⠎⡝⢂",
        "⣿⢾⡽⣞⣯⢶⣻⢾⣽⣛⡷⣞⡧⣿⣹⠽⣶⢻⡝⣮⡝⣲⢫⠔⢣⠄⡣⢘⠰⣈⠱⡘⡘⠣⢌⠰⣉⢻⡿⠻⣿⣿⡿⠟⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣿⣿⡻⣿⣿⡀⢿⣿⢋⣥⣾⣿⣿⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⠣⠌⡃⢬⡑⢊",
        "⣟⣯⢿⡽⣞⣯⣟⢯⡾⣝⣳⠿⣜⢧⣏⠿⣜⢯⡞⡵⢪⡕⢪⡜⡡⢊⠔⡡⠒⠤⢁⠆⠹⡐⡬⠒⣨⣿⠁⠀⠙⠻⢿⣶⣿⣿⡿⠛⠋⠉⠉⠛⠻⣯⣠⡿⣧⠙⢿⡇⠀⣿⠋⠉⠉⠉⠉⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠠⠑⢢⡑⠌",
        "⣿⢯⡿⣽⣻⣞⣭⠿⣝⣯⢳⢯⡝⡾⣜⡻⣜⢧⣫⢓⡧⣚⠥⣒⢡⠊⡔⢡⢘⡐⠈⡌⢱⡑⢆⡱⣼⠃⠀⠀⠀⠀⣀⣤⣿⣢⣤⣶⢂⠀⠀⢲⣦⡈⠙⡻⠿⠖⠋⠀⠀⢻⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⠈⠀⡜⠰⣈⠒",
        "⣿⢯⣟⡷⣻⠼⣞⣻⡝⣮⢟⡮⣽⣱⢫⡵⣫⢞⡴⣋⡞⣵⢊⡵⣊⠵⣉⢦⠣⣜⡱⣚⢦⡙⢦⣹⡏⢠⡶⣶⣿⣿⣿⡿⣿⢿⣿⣾⣭⣶⣤⣦⣿⣿⣦⣷⣦⣀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠂⠁⠂⠜⢡⢂⡱",
        "⣿⣻⡞⣷⢫⡟⡼⢧⡻⣜⡏⣾⡱⣎⠷⣱⡹⢎⡵⢳⡜⣥⠻⡴⣩⠖⣭⠲⣹⡐⢧⡙⣦⡙⢦⣿⠁⣼⣿⣿⣿⣿⣿⡀⠀⠀⠈⠛⣿⠛⣿⣻⡿⠟⠋⠛⢿⣿⣷⣆⠀⠀⣿⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠠⠀⢀⠡⢈⠰⣈⠒⢦⡑",
        "⣿⢷⣿⣉⣷⢏⣹⢷⡹⣾⡸⣇⡹⣈⢷⢇⡹⣎⡸⢇⡾⣰⠏⣱⢇⡹⣆⠿⣰⠹⢶⠹⣰⢹⢶⣿⡀⣿⡇⢏⣿⠏⠿⣿⣶⣆⣀⠀⠀⠀⣾⠏⠀⠀⠰⠆⠀⠹⣿⡹⣷⠀⣿⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠀⠈⡀⠆⠀⠆⠁⠀⠰⠈⡰⢀⠏⣆⠹",
        "⣿⣻⢶⣻⡼⣏⢷⣫⢗⡧⣟⡴⢫⡵⢪⢎⡵⢪⡕⣫⢔⡣⠞⡥⣎⠵⣊⠷⣡⢏⠲⣽⣶⠿⠛⠉⣿⣿⡘⣆⡿⠀⠰⣷⢮⣭⣟⣛⣿⠶⠿⠶⠤⠤⠴⠬⢷⣄⢸⣿⠌⠀⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣐⠠⠀⡁⠠⢀⢁⠢⡑⢄⢫⡘⡴⣋",
        "⣷⣯⣟⣧⢿⣹⢾⡱⣏⢾⡱⣏⢷⣚⡳⢎⡼⢣⠞⡴⢣⢞⡹⢦⡝⢮⡱⣫⣴⣭⠞⠉⠀⠀⠀⠀⠛⣿⣧⡿⢡⣀⠴⣫⢞⡭⡩⢏⡹⠛⠟⡛⠿⢷⣶⣄⠀⠙⢿⣿⡄⢠⡏⠀⠀⠌⠀⠀⠀⠀⠀⠀⠀⠀⠂⠄⠒⡀⠀⡐⠀⠰⢀⢂⠒⢌⢂⠦⣱⢣⡝",
        "⣟⡾⢮⡷⣯⣻⢧⣟⡭⣟⣳⠽⣮⢳⡝⢮⡵⢫⠞⣵⢋⡞⡹⣆⣻⡶⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⡜⣱⢺⡝⣧⠟⡴⣉⠆⡠⢉⠴⡠⢇⠸⢤⣿⠆⠀⣾⣏⡷⠘⠻⣦⡐⠀⠀⠀⠀⠀⠀⠀⠀⠂⠠⠀⠃⠄⠂⠐⠀⡁⢂⠌⡘⢤⢊⠲⣡⢗⡯",
        "⡿⣽⢯⣟⡷⣯⣟⡼⣝⡮⣝⣻⡜⣯⢞⡣⢏⢧⡻⣼⣭⣶⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣝⢦⡙⠺⣥⠻⡵⡌⢆⡱⡀⠆⡑⢊⡑⢺⡿⠀⠀⢻⢿⡇⠀⠀⠈⠻⣤⡀⠀⠀⠀⠀⠀⠀⢀⠠⠁⢈⠐⠀⠌⡐⢈⠔⡨⢘⠥⣊⢖⡱⣯⢞",
        "⣿⣽⣻⢾⣽⡳⢯⡽⣞⡵⢯⡳⣝⣮⣷⡽⠿⠛⠛⠋⠉⠁⢠⣀⠀⠀⣀⣀⡀⠀⠀⠀⠀⠀⣀⡿⠟⣿⣿⣿⣿⣮⣕⢦⣛⡵⣚⢦⣑⣌⡐⢀⠀⡄⠛⠁⣀⣰⣿⣼⣷⣄⠀⠀⠀⠈⠻⣦⡀⠀⠀⠄⠠⠀⡀⠂⢄⡈⠔⡨⠄⣃⠘⣄⢋⠴⣩⢮⡵⢯⣻",
        "⣟⡾⣽⢯⣶⢻⡻⣜⢧⣻⣷⡿⠛⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠙⣫⣉⡉⠲⣦⣀⣤⣴⠟⠉⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣏⡷⣭⣲⣍⣦⣏⡼⣩⣷⣿⣿⣿⣧⡙⠿⣦⣄⠀⠀⠦⣈⠛⢦⣖⠀⠄⠃⠤⢁⠢⡐⢌⠰⡈⢄⠣⡌⢎⠶⣱⢮⡽⣏⣷",
        "⣯⢿⡽⣞⢧⡿⣹⣝⡶⠟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⢿⣉⠀⣤⣀⣤⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣹⣿⡀⡈⠻⣧⣖⠀⠈⠳⣄⡉⠻⢾⣅⡲⢌⢂⠩⢄⠓⡌⢎⡱⢎⡹⣎⣷⣹⢾⡽⣾",
        "⣯⢷⣻⢭⣟⡼⣷⠟⠀⢀⣀⠤⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠛⠶⣿⡟⠻⣯⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣰⠈⢿⣿⣆⠀⠈⠻⣧⣤⡤⠼⠳⢤⣀⡈⠙⠷⣮⣃⢎⡹⣘⢮⡱⣏⡽⣳⣝⣯⣟⣿⢿",
        "⣟⣯⢽⣛⣮⣿⠋⠀⢚⣉⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⢀⠀⠀⠀⠀⠈⠙⠛⠿⣿IN VIM WE TRUST⣿⣿⣤⣤⠈⠻⢦⣤⣴⡋⠀⠀⠀⠀⠀⠀⠉⠓⢤⣈⠛⢷⡼⣱⢎⣷⣹⣞⣷⣻⣾⣟⣯⣿",
        "⡿⣜⢧⢻⣾⣏⣴⡿⢟⡹⣼⡱⠎⡀⠀⠉⠑⠳⣄⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⣴⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠡⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠞⠋⠀⠀⠀⠀⠀⠀⠀⠈⣧⣀⠀⠀⠀⠀⠀⠀⠀⠉⠲⣌⠻⣧⣿⢎⣷⡾⣯⣷⣿⣻⣿⣻",
        "⢳⣉⢮⡽⣹⣿⣿⣾⣿⣿⣽⣶⣥⣚⡴⣤⡤⢀⢻⠃⠀⠀⠀⠀⠀⠀⠀⠀⢠⡞⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠌⠻⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠹⣇⠀⠀⠀⠀⠀⠀⠀⠀⠘⣧⡘⣿⣿⢾⣽⣟⣷⣿⣿⣽⣿",
        "⢣⠜⢺⣳⣿⣿⣿⣿⣿⣿⣿⣯⣷⣯⣟⣧⣛⡤⣈⢳⡆⠀⣄⡀⠀⠀⠀⠀⠉⠁⠐⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣐⠘⠻⢟⣿⣿⠿⠋⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣹⣿⣿⣻⣿⣯⣷⣿⢿⣾",
        "⠢⢉⢂⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣯⢶⡍⢶⣰⢂⠈⡙⢳⢦⣽⠻⣦⣀⣀⣤⠖⠚⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢿⣿⣿⣦⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⡀⠈⠻⣦⡀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣷⡿⣿⣻⣿⣻",
        "⢀⠃⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡜⡯⣔⢪⣴⣵⣯⣿⣿⣷⡿⠿⠛⠁⠋⠉⠉⠈⡆⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⢙⠻⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⡀⠈⣿⣦⣄⡠⢀⠄⣰⢢⣿⣿⣿⣿⣷⡿⣟⣯⣷⢿",
        "⠀⡒⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣳⣽⣮⣿⣿⣿⣿⣍⢃⠀⠀⣠⣀⡀⠀⣀⣠⡄⠀⠀⢀⡜⠁⠀⠀⠀⠀⠀⠀⢠⣬⣥⡦⢿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢿⣶⣯⣿⣮⣵⣋⠼⣦⣯⣿⣿⣿⡿⣞⣿⣻⣽⡾⣿",
        "⠐⠉⣿⣿⣿⣿⣿⡽⢯⣟⣯⢛⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣯⣶⣷⣤⣬⣅⡛⣩⣥⠦⠄⠠⠚⠛⠂⠀⠰⠀⠀⠀⠀⠈⠚⠿⣧⠘⠛⠳⠆⠀⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⢈⠻⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⡿⣽⣷⣻⢷⣻⣽",
        "⠀⠀⢻⣿⣿⡿⢯⡝⣧⢛⢮⡵⢊⣽⡿⠉⠣⠙⡭⢏⡳⣝⢾⣿⣿⣿⣿⣿⣏⢧⡈⢥⠉⢷⣄⠀⠀⣀⠧⠀⠀⠀⠀⠀⠀⠀⠀⣤⠀⣀⢀⣹⣷⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠐⠦⠴⣤⣄⣲⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⢯⣟⣯⢟⡾",
        "⡄⢁⢻⣿⣿⣝⠯⣝⡳⢯⣼⠇⢢⡿⠛⠠⠄⢛⠰⣘⠳⣎⢻⣿⣿⣿⣿⣿⣿⣯⡽⣎⡕⣆⠹⡷⠰⠷⠀⢀⣀⠐⠀⠀⠀⣀⣤⣩⣞⠋⢠⣍⣿⠇⠀⠀⠀⠀⢀⡀⠀⠀⣠⡄⠀⠀⠀⡀⢀⡤⣉⣿⣿⣿⣿⣿⡿⡿⣿⢻⢿⣟⠤⢻⣿⣯⣟⡾⣣⢏⡜",
        "⠜⣬⢿⣿⣿⢾⣹⣿⣟⢻⠋⣤⣿⠱⢈⠲⡰⢄⢆⡈⢳⡌⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣞⣧⣟⡥⣃⡄⣤⠀⠀⠀⢀⣤⣿⠟⢋⡷⠟⠿⣦⣼⣿⣷⣦⡶⣦⣤⣤⣤⡴⢾⣡⡤⠀⠀⠀⡄⣘⣶⣿⣿⣿⣿⣿⢳⡟⢷⡍⢦⢉⠞⣧⠌⢻⣿⣾⡱⣏⠾⣜",
        "⣇⠚⢬⣿⡿⣽⣿⣿⡹⣎⣳⡿⢡⠒⣇⠠⣕⣎⡼⣈⢷⡸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣷⢦⣝⢢⣡⣴⡾⠟⢋⢀⡀⠀⣀⣀⣀⣀⣤⣦⣀⠀⢠⣀⡈⠉⠉⠉⠻⠟⠀⠀⠁⡘⣼⣿⣿⣿⣿⣿⣿⣏⡳⣜⠣⢞⢣⡉⢎⡹⢎⡈⢿⣷⣝⢮⣻⢼",
        "⠋⡙⢦⣿⣿⣿⣿⣳⡻⢼⣿⡁⢧⢏⣰⢇⠶⣴⣼⡱⣏⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢾⣿⣿⣷⣎⣜⣣⢟⣤⣓⣔⣨⣍⣻⣿⣿⣿⡻⢳⠈⠙⣿⣧⣴⢀⢢⡐⣸⣵⣾⣿⣿⣿⣿⣿⣿⣿⢧⡹⣌⢏⡞⣦⡝⡦⣱⢻⣆⠼⣿⣿⣏⡾⣯",
        "⠀⠘⣷⣿⣿⣿⣿⡿⣟⣿⣿⡘⢧⣞⡜⣮⡹⣝⣶⣹⣟⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣉⣿⣿⣿⣿⣿⣿⣥⣆⣷⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⡟⣼⢎⣳⢮⣜⣳⢧⣏⢿⣶⡸⣿⣭⢷⣻",
        "⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣷⢹⣾⢹⡾⣱⣿⣹⡾⣷⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢿⡹⣎⢷⣾⣸⢷⣏⡾⡾⣿⡇⢹⣿⡾⣷",
        "⠃⠀⠀⢻⣿⣿⣿⣿⣿⣿⣟⡷⣞⣧⣟⣳⢯⣷⣻⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⡟⢻⠟⡯⣝⣯⣟⡿⣽⢯⠿⠛⠉⠄⠱⠅⢨⠁⠈⠢⠱⡙⢿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣟⡿⣝⣯⣟⣿⣟⡾⣽⣻⣿⣿⣆⠹⣿⣷",
        "⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣾⣽⣻⢾⣯⣽⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣶⣉⢶⡻⣜⠯⡙⠳⢊⡁⠁⠈⠐⠆⠀⢨⡿⠁⠀⠀⢌⢂⠩⢏⡟⣿⢿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠙",
        "⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣾⣷⣯⣞⣡⡒⡠⢄⡡⢰⣧⣆⠠⢰⢇⡀⢀⠄⣬⢎⣵⢻⡘⣧⣮⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣽⣿⣿⣿⣿⠃⠀⠀⠀",
        "⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡙⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣵⣧⣾⣿⣿⣿⣿⣿⣾⣼⣧⣾⣿⣿⣞⣧⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀",
        "⠀⠀⠀⠀⡀⠒⣻⣿⣿⣿⣿⣿⣿⡻⢋⡝⣒⢦⡻⣌⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡟⣯⠹⣭⠻⣽⢿⣿⣿⠟⡹⣍⠻⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠀⠀⠀⠀",
        "⠀⠀⠠⢂⠥⣘⣽⣿⣿⣿⣿⣿⡫⢱⣋⠦⡙⢮⢳⢹⡓⣦⢛⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣟⣿⣏⣞⡿⣾⡽⣞⡽⣎⣿⣿⣟⡮⣵⢾⣹⣿⣧⣟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⡀",
        "⠀⠠⠑⡎⢶⣱⢾⣿⣿⣿⣿⣿⣏⢳⡘⢆⡙⢎⢧⢳⡝⣮⣻⡽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣀⠀⢠⠀",
        "⠀⠐⢈⣜⣳⢮⢿⣿⣿⣿⣿⢏⣜⠣⡝⢢⣙⢎⣮⢳⡽⣳⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡱⢎⡱⢊⠀",
        "⢠⡚⠜⣮⡟⣟⣾⣿⣿⣿⣿⢺⣍⡳⣜⢇⡞⡾⣜⣳⢿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣭⢟⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⣝⣣⣟⣯⣭⣻⢿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣻⡿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⣿⣿⣿⣿⣷⣊⠅⢫⠖",
        "⢥⠘⡼⣹⣽⣿⣿⣿⣿⣿⣯⢷⣬⣳⣝⡾⣼⣳⣯⣿⣿⣿⣿⣿⣿⣟⣿⣿⣿⣿⣿⡿⢮⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣷⣿⣾⣿⣽⣿⣿⣿⣽⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢿⣹⠿⣿⣿⣿⣿⣿⣿⣷⣭⣋⠝⢿⣿⣿⣿⣜⡘⢦⡙",
        "⢎⡸⣜⣷⣿⣿⣿⣿⣿⣟⣾⣻⣟⡿⣿⣿⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣏⠾⣜⢿⣿⣿⢾⢿⣿⡿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡽⢾⡽⣮⣓⢯⣝⣻⣿⣿⣿⣿⣿⣿⣿⣟⣻⣿⣿⣿⣿⣿⣶⡹",
    },

    {
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⠴⠤⠤⠴⠄⡄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⣠⠄⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⠁⠃⠆⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⢀⡜⠁⠀⠀⠀⢠⡄⠀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠑⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⢈⠁⠀⠀⠠⣿⠿⡟⣀⡹⠆⡿⣃⣰⣆⣤⣀⠀⠀⠹⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⣼⠀⠀⢀⣀⣀⣀⣀⡈⠁⠙⠁⠘⠃⠡⠽⡵⢚⠱⠂⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⡆⠀⠀⠀⠀⢐⣢⣤⣵⡄⢀⠀⢀⢈⣉⠉⠉⠒⠤⠀⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀VIM⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠉⠉⠁⠁⠈⠀⠸⢖⣿⣿⣷⠀⠀⢰⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⢀⠃⠀⡄⠀⠈⠉⠀⠀⠀⢴⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⢈⣇⠀⠀⠀⠀⠀⠀⠀⢰⠉⠀⠀⠱⠀⠀⠀⠀⠀⢠⡄⠀⠀⠀⠀⠀⣀⠔⠒⢒⡩⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⣴⣿⣤⢀⠀⠀⠀⠀⠀⠈⠓⠒⠢⠔⠀⠀⠀⠀⠀⣶⠤⠄⠒⠒⠉⠁⠀⠀⠀⢸⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⡄⠤⠒⠈⠈⣿⣿⣽⣦⠀⢀⢀⠰⢰⣀⣲⣿⡐⣤⠀⠀⢠⡾⠃⠀⠀⠀⠀⠀⠀⠀⣀⡄⣠⣵⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠘⠏⢿⣿⡁⢐⠶⠈⣰⣿⣿⣿⣿⣷⢈⣣⢰⡞⠀⠀⠀⠀⠀⠀⢀⡴⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠈⢿⣿⣍⠀⠀⠸⣿⣿⣿⣿⠃⢈⣿⡎⠁⠀⠀⠀⠀⣠⠞⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠈⢙⣿⣆⠀⠀⠈⠛⠛⢋⢰⡼⠁⠁⠀⠀⠀⢀⠔⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠚⣷⣧⣷⣤⡶⠎⠛⠁⠀⠀⠀⢀⡤⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⠁⠀⠀⠀⠀⠀⠠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
    },

    {
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡟⢄⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣄⡎⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⡀⣆⢸⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣷⣿⣼⣿⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⢿⣿⡿⠛⠛⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢘⣹⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⢠⢀⠠⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⡀⣀⣼⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠈⣆⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠋⠻⠶⢻⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⡞⢻⠡⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡤⠞⡛⠛⢿⣶⣶⠀⠀⠀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⣧⠀⠀⠀⠀⢠⠀⠀⠀⠀⠀⠀⣼⠤⡘⠣⠤⢊⣿⣿⡄⠀⠀⠀⠀⠘⡄⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⢸⡃⠀⠐⠀⠀⢸⡇⠀⠀⠀⠀⠀⠄⠀⠀⠀⠀⣼⣿⣿⣟⠀⠀⠀⠀⠀⠘⣦⡀⢀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⣧⡀⠀⠰⣤⣼⡇⢀⠀⠀⠀⣶⣾⣶⣷⣶⣤⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⢹⣷⣌⢷⣤⡀⠀",
        "⠀⠀⠀⠀⠀⠀⢹⣿⣷⡄⠙⠟⠀⠀⠀⠀⠀⣿⣿⡿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⢨⣿⣿⡷⣄⣽⡖",
        "⠀⠀⠀⠀⠀⠀⠀⠹⣿⢣⡀⠀⠀⠀⠀⠀⣰⠀⠉⠐⢿⡏⣽⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠠⢩⣁⣴⣿⡿⠁",
        "⠀⠀⠀⠀⠀⠀⠀⠀⢻⠃⠁⠀⠀⠀⠀⠀⠙⠀⠀⡀⢀⣼⣿⣿⢯⠄⠀⣠⣀⣴⣿⣦⣖⣶⣿⣿⣿⡟⠁⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⢀⠀⠀⠈⠉⠉⠡⠀⢀⢰⣽⠟⣻⣿⣵⣿⣿⣿⣿⠟⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⡂⠀⠀⠃⠀⠀⠀⠀⠀⠘⠀⠀⠀⠀⠀⠀⢀⣾⣾⣿⣾⣿⣿⣿⣿⡿⠟⠁⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢸⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⣿⣿⣿⡟⣿⣿⣿⠟⠉⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠘⠏⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣟⣶⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⢸⣆⠁⡀⠀⢶⣄⣼⠷⡀⠀⠀⠿⣿⡿⣿⣿⣟⣾⣿⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠸⣏⡏⠉⠂⠀⠉⠀⠀⠐⠂⢀⣠⣾⣿⣿⣿⣿⣿⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⣹⣶⠞⠂⠀⡞⡆⠰⠶⣬⣿⣯⣿⣿⣿⣿⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣶⣦⣼⣧⣦⣤⣠⣼⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣯⣿⣿⣿⣉⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣽⣽⣿⣿⣿⣿⣿⣿⣿⣇⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⢀⡴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⢿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣦⣉⡘⠿⣿⣿⣿⣿⣿⣿⣿⡟⠁⣾⠿⣡⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣶⣶⣿⣿⣿⡿⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⣀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⠀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
        "⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇            ",
    },

    {
        "                                        ++=-:::-+++                    ",
        "                                    +-.  .       ...-=*                ",
        "                                   =..              ...-+              ",
        "                                 *-.     .    .       ...=             ",
        "                                 *..                     .=            ",
        "                                +***-..  =**+-:.... .     :+           ",
        "                                *-...-.  ......=:..       .*           ",
        "                                +..-.-.. :+....   .....   .=           ",
        "                                =...=..........   .....   .*           ",
        "                               *...:..:.=:.       ......::-            ",
        "                               =........:.             .=::+           ",
        "                               *. .-:::-=.    .=..  . ::-.-*           ",
        "                               #..+=-:::+=.= .....   .+-+.+            ",
        "                               *-.....:....==-.:. .=:-::-+             ",
        "                              *-.-........=-=:::..::. .=               ",
        "                              *:=-=..   .:-.+..=-=.....=               ",
        "                              *:-.+-:::-=+:.*..+-:    .+               ",
        "                              *--.-=. .+:+..+-==.:.....:*              ",
        "                              *.-.:+. .:.+..=..=::.......:=*           ",
        "                              +.:.:+. :.:+..=..=.-......   .:-**       ",
        "                              =.:..+..:..= .-..:.--....     ......:*-  ",
        "                             *::.  -..-..:... ...:+....      .    . ..=",
        "                            ==..   .:.-.....:..=..-  .        .:--: ...",
        "                        *+-..-..   .=-. ..........-..     ..--:....  . ",
        "                +:......... .:..    .-.   ..      -.:-++-........    . ",
        "             ==.   . .   .   :..    .-.          .- ..                 ",
        "            =...           ..:...   .-. .        -.       .         .  ",
        "           +..          .   :-.     .-.  .. .  .-..                    ",
        "          =:.         .  ..=..      .-.     .  .. .   .          .    .",
        "          *.         ...-:..       .::-.  .    ..-..    .         .-:..",
        "          +.        .:-.....  .   .-...=.        ..-..   .   . .-.:==. ",
        "         =-..   ..:-....       . :-...  -..      . .::. . .    ..-*--:.",
        "         +.....=:..  .   .    ..-...    .-.        ...-...    .::...   ",
        "     ++.. .--.                .=..       .-      ..   .::..  .-.       ",
        "   +-..       .. .      .   ..-...        ::. .   ..........--=-::.....",
        " +-..            .          .-.. .  . .   ..:.   ......       ......:--",
        "*..          .    .    ....::...           .::    .....          ......",
    },
}

local function get_header(increment)
    if increment then
        header_idx = header_idx + 1
        if header_idx > #headers then
            header_idx = 1
        end
    end

    return headers[header_idx]
end

local function setup_dashboard(was_loaded)
    require("dashboard").setup({
        theme = "hyper",
        config = {
            project = { enable = false },
            header = get_header(was_loaded),
            footer = {},
            week_header = {
                enable = false,
            },
            mru = { enable = false },
            shortcut = {
                {
                    desc = "",
                    group = "@property",
                    action = "silent Lazy reload dashboard-nvim",
                    key = "u",
                },
            },
        },
    })
end

local loaded = false

return {
    {
        "glepnir/dashboard-nvim",
        lazy = false,
        priority = 900,
        config = function()
            setup_dashboard(loaded)
            if loaded then
                -- this has to happen to refresh dashboard when cycling glorious shreks
                vim.cmd("e ~/.___temp" .. tostring(header_idx))
                vim.cmd("Dashboard")
            end
            loaded = true
        end,
    },

    {
        "kevinhwang91/nvim-ufo",
        event = "VeryLazy",
        dependencies = "kevinhwang91/promise-async",
        config = function()
            local ufo = require("ufo")
            ufo.setup({
                provider_selector = function(bufnr, filetype, buftype)
                    return { "lsp", "indent" }
                end,
            })

            local set = vim.keymap.set

            set("n", "zR", ufo.openAllFolds)
            set("n", "zM", ufo.closeAllFolds)
            set("n", "zK", function()
                local winid = require("ufo").peekFoldedLinesUnderCursor()
                if not winid then
                    vim.lsp.buf.hover()
                end
            end)
        end,
    },

    { "romainl/vim-cool", event = "VeryLazy" },

    {
        "norcalli/nvim-colorizer.lua",
        event = "VeryLazy",
        config = function()
            require("colorizer").setup()
        end,
    },

    {
        "folke/noice.nvim",
        event = "VeryLazy",
        opts = {
            -- add any options here
        },
        config = function()
            local noice = require("noice")
            noice.setup({
                lsp = {
                    progress = {
                        enabled = false,
                    },
                    signature = { auto_open = { enabled = false } },
                },
                notify = {
                    enabled = false,
                },
                presets = {
                    bottom_search = true,
                    command_palette = true,
                    long_message_to_split = true,
                    inc_rename = false,
                },
            })
        end,
        dependencies = {
            {
                "echasnovski/mini.notify",
                config = function()
                    local notify = require("mini.notify")
                    notify.setup({
                        lsp_progress = { enable = false },
                        window = {
                            config = {
                                anchor = "NE",
                                border = "none",
                            },
                            winblend = 50,
                        },
                    })
                    vim.notify = notify.make_notify()

                    local set = vim.keymap.set
                    set("n", "<leader>nd", notify.clear)
                    set("n", "<leader>nh", notify.show_history)
                    set("n", "<leader>nr", notify.refresh)
                end,
            },
            {
                "j-hui/fidget.nvim",
                config = function()
                    require("fidget").setup({
                        progress = {
                            display = {
                                progress_icon = { pattern = "moon" },
                                progress_style = "moon",
                            },
                        },
                    })
                end,
            },
            "MunifTanjim/nui.nvim",
        },
    },

    { "BlankTiger/mintabline.vim", event = "VeryLazy" },
}
